// Generated by CoffeeScript 1.9.2
(function() {
  "use strict";
  var app;

  app = angular.module('CronSchedule', []);

  app.directive("simpleCronSchedule", [
    '$compile', function($compile) {
      var sSchedule, sScheduleController, sScheduleLink;
      sScheduleController = function($scope, $element, $attrs) {
        var aCron, createBaseCron, cronTypeRegex, generateCron, i, j, self, updateModels;
        aCron = ["0", "0", "0", "0", "0", "0"];
        this.cronDefaultCustomValue = aCron.join(" ");
        cronTypeRegex = {
          hourminute_m: /^[0-9]{1,2}\s[0-9]{1,2}\/[0-9]{1,2}\s\*\s\*\s\*\s\*$/,
          hourminute_h: /^[0]\s[0-9]{1,2}\s[0-9]{1,2}\/[0-9]{1,2}\s\*\s\*\s\*$/,
          week: /0\s(\d{1,2})\s(\d{1,2})\s\*\s\*\s(.*)/
        };
        self = this;
        $scope.radioTypes = {
          1: "custom",
          2: "hourminute",
          3: "week"
        };
        this.range = {
          hour: [],
          hourincrement: [1, 2, 3, 4, 6, 8, 12, 24],
          minute: [],
          minuteincrement: [1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30],
          second: [],
          dayofweek: ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"]
        };
        $scope.dayofweekConvert = {
          "SUN": "SUN",
          "MON": "MON",
          "TUE": "TUE",
          "WED": "WED",
          "THU": "THU",
          "FRI": "FRI",
          "SAT": "SAT"
        };
        this.hourminute = {
          types: [
            {
              name: "minute(s)",
              value: "minute"
            }, {
              name: "hour(s)",
              value: "hour"
            }
          ]
        };

        /* calculating hour, minute, second ranges */
        for (i = j = 0; j < 60; i = ++j) {
          if (i < 24) {
            self.range.hour.push({
              value: i,
              name: i + "h"
            });
          }
          self.range.minute.push({
            value: i,
            name: i + " min"
          });
          self.range.second.push({
            value: i,
            name: i + " s"
          });
        }

        /* creates base cron configuration * * * * * * */
        createBaseCron = function() {
          var k;
          for (i = k = 0; k <= 6; i = ++k) {
            aCron[i] = '*';
          }
        };

        /* modify schedule module and generate final cron task string */
        generateCron = function() {
          $scope.schedule = aCron.join(" ");
        };

        /* Generate custom cron type - Gets custom value of custom value and generates cron task string */
        this.generateCustomCron = function() {
          var auxCron;
          auxCron = $scope.cron.custom.value.split(" ");
          if (auxCron.length <= 6) {
            aCron = auxCron;
          }
          $scope.cron.custom.value = generateCron();
        };

        /* 
            Generate hourminute cron type
        			 - Create base configuration
        			 - Generates cron task string depending on type selected (hour(s)/minute(s))
         */
        this.generateHourminuteCron = function() {
          createBaseCron();
          if ($scope.cron.hourminute.type.value === "minute") {
            aCron[0] = $scope.cron.hourminute.subValue2.value;
            aCron[1] = $scope.cron.hourminute.subValue1.value + "/" + $scope.cron.hourminute.value;
          } else if ($scope.cron.hourminute.type.value === "hour") {
            aCron[0] = "0";
            aCron[1] = $scope.cron.hourminute.subValue2.value;
            aCron[2] = $scope.cron.hourminute.subValue1.value + "/" + $scope.cron.hourminute.value;
          }
          $scope.cron.custom.value = generateCron();
        };

        /*
        Generate week cron type
        			 - Create base configuration
        			 - Parse days of week and generate cron task string
         */
        this.generateWeekCron = function() {
          createBaseCron();
          aCron[0] = "0";
          aCron[1] = $scope.cron.week.subValue2.value;
          aCron[2] = $scope.cron.week.subValue1.value;
          aCron[5] = $scope.cron.week.value.join(",");
          if (aCron[5] === "") {
            aCron[5] = "*";
          }
          $scope.cron.custom.value = generateCron();
        };

        /*
            Update models that have information about the cron task based on cron type (hourminute_m, hourminute_h, week)
            every time that update the scheduleType, it generates cron task string, check watch('scheduleType',...) function
         */
        updateModels = function() {
          return {
            'hourminute_m': function() {
              $scope.scheduleType = $scope.radioTypes["2"];
              $scope.cron.hourminute.type = self.hourminute.types[0];
              $timeout(function() {
                var subschedule;
                $scope.hourminuteRange.value = self.range.minuteincrement;
                $scope.hourminuteRange.subValue1 = self.range.minute;
                $scope.hourminuteRange.subValue2 = self.range.second;
                $scope.cron.hourminute.subValue2 = self.range.second[parseFloat(schedule[0], 10)];
                subschedule = schedule[1].split("/");
                $scope.cron.hourminute.subValue1 = self.range.minute[parseFloat(subschedule[0], 10)];
                $scope.cron.hourminute.value = parseFloat(subschedule[1], 10);
                return $scope.$apply();
              });
            },
            'hourminute_h': function() {
              $scope.scheduleType = $scope.radioTypes["2"];
              $scope.cron.hourminute.type = self.hourminute.types[1];
              $timeout(function() {
                var subschedule;
                $scope.hourminuteRange.value = self.range.hourincrement;
                $scope.hourminuteRange.subValue1 = self.range.hour;
                $scope.hourminuteRange.subValue2 = self.range.minute;
                $scope.cron.hourminute.subValue2 = self.range.minute[parseFloat(schedule[1], 10)];
                subschedule = schedule[2].split("/");
                $scope.cron.hourminute.subValue1 = self.range.hour[parseFloat(subschedule[0], 10)];
                $scope.cron.hourminute.value = parseFloat(subschedule[1], 10);
                return $scope.$apply();
              });
            },
            'week': function(schedule) {
              $scope.scheduleType = $scope.radioTypes[3];
              $scope.cron.week.subValue2 = self.range.minute[parseFloat(schedule[1], 10)];
              $scope.cron.week.subValue1 = self.range.hour[parseFloat(schedule[2], 10)];
              return $scope.cron.week.value = schedule[5].split(",");
            }
          };
        };

        /*
        Always update cron custom value and also populate the models
         */
        this.setInitialCron = function(initialCron) {
          var fn, k, len, regex;
          $scope.cron.custom.value = initialCron;
          fn = function(regex) {
            if (cronTypeRegex[regex].exec(initialCron)) {
              return updateModels.regex(initialCron.split(" "));
            }
          };
          for (k = 0, len = cronTypeRegex.length; k < len; k++) {
            regex = cronTypeRegex[k];
            fn(regex);
          }
        };
      };
      sScheduleLink = function(scope, element, attrs, controller) {
        scope.schedule = controller.cronDefaultCustomValue;
        scope.scheduleType = "custom";
        scope.hourminuteRange = {
          value: controller.range.minuteincrement,
          type: controller.hourminute.types,
          subValue1: controller.range.minute,
          subValue2: controller.range.second
        };
        scope.weekRange = {
          value: controller.range.dayofweek,
          subValue1: controller.range.hour,
          subValue2: controller.range.minute
        };
        scope.cron = {
          custom: {
            disabled: false,
            value: controller.cronDefaultCustomValue
          },
          hourminute: {
            disabled: true,
            value: 1,
            type: controller.hourminute.types[0],
            subValue1: controller.range.minute[0],
            subValue2: controller.range.second[0]
          },
          week: {
            disabled: true,
            value: [],
            subValue1: controller.range.hour[0],
            subValue2: controller.range.minute[0]
          }
        };
        if (scope.initalValue != null) {
          controller.setInitialCron(scope.initialValue);
        }
        scope.$watch('cron.hourminute.type', function(newValue, oldValue) {
          if (newValue !== oldValue) {
            switch (newValue.value) {
              case "minute":
                scope.hourminuteRange.value = controller.range.minuteincrement;
                scope.cron.hourminute.value = controller.range.minuteincrement[0];
                scope.hourminuteRange.subValue1 = controller.range.minute;
                scope.cron.hourminute.subValue1 = controller.range.minute[0];
                scope.hourminuteRange.subValue2 = controller.range.second;
                scope.cron.hourminute.subValue2 = controller.range.second[0];
                break;
              case "hour":
                scope.hourminuteRange.value = controller.range.hourincrement;
                scope.cron.hourminute.value = controller.range.hourincrement[0];
                scope.hourminuteRange.subValue1 = controller.range.hour;
                scope.cron.hourminute.subValue1 = controller.range.hour[0];
                scope.hourminuteRange.subValue2 = controller.range.minute;
                scope.cron.hourminute.subValue2 = controller.range.minute[0];
            }
          }
        });
        scope.$watch('cron.custom.value', function(newValue, oldValue) {
          if (newValue !== oldValue) {
            if (scope.scheduleType === scope.radioTypes["1"]) {
              controller.generateCustomCron();
            }
          }
        });
        scope.$watchCollection('[cron.hourminute.type,cron.hourminute.value,cron.hourminute.subValue1,cron.hourminute.subValue2]', function(newValues, oldValues) {
          if (scope.scheduleType === scope.radioTypes["2"]) {
            controller.generateWeekCron();
          }
        });
        scope.$watchCollection('[cron.week.value,cron.week.subValue1,cron.week.subValue2]', function(newValues, oldValues) {
          if (scope.scheduleType === scope.radioTypes["3"]) {
            controller.generateWeekCron();
          }
        });
        scope.$watch('scheduleType', function(newValue, oldValue) {
          var fn, j, len, ref, type;
          if (newValue !== oldValue) {
            ref = scope.radioTypes;
            fn = function(type) {
              return scope.cron[scope.radioTypes[type]].disabled = true;
            };
            for (j = 0, len = ref.length; j < len; j++) {
              type = ref[j];
              fn(type);
            }
            scope.cron[newValue].disabled = false;
            if (newValue === scope.radioTypes["1"]) {
              return controller.generateCustomCron();
            } else if (newValue === scope.radioTypes["2"]) {
              return controller.generateHourminuteCron();
            } else if (newValue === scope.radioTypes["3"]) {
              return controller.generateWeekCron();
            }
          }
        });
        if (scope.scheduleEdit()) {
          return scope.scheduleEdit.then(function(schedule) {
            return controller.setInitialCron(schedule);
          })();
        }
      };
      sSchedule = {
        restrict: 'AE',
        scope: {
          schedule: '=?',
          scheduleEdit: '&',
          initialValue: '@'
        },
        controller: sScheduleController,
        link: sScheduleLink,
        templateUrl: 'simpleCronSchedule.html'
      };
      return sSchedule;
    }
  ]);

}).call(this);
